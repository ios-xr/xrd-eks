AWSTemplateFormatVersion: "2010-09-09"
Description: Create AMI suitable for running XRd vRouter under EKS

# Based on https://stackoverflow.com/questions/21431450/create-ami-image-as-part-of-a-cloudformation-stack

Metadata:
  cfn-lint:
    config:
      ignore_checks: []
  LintSpellExclude: []

Parameters:

  EksQsSharedResources:
    Type: String
    AllowedValues: ['AutoDetect', 'No']
    Default: 'AutoDetect'
    Description: Choose "No" if you already deployed another EKS Quick Start stack in your AWS account.

  XrdS3BucketName:
    Type: String
  XrdS3KeyPrefix:
    Type: String
  XrdS3BucketRegion:
    Type: String

  KubernetesVersion:
    Type: String
    AllowedValues: [ "1.22" ]
    Default: "1.22"
    Description: Kubernetes control plane version.

  InstanceType:
    Description: Instance type to use to build AMI.  Default should be fine for most/all cases.
    Type: String
    Default: m5.2xlarge

Conditions:
  EnsureEksQsSharedResources: !Equals [ !Ref EksQsSharedResources, 'AutoDetect' ]

Resources:

  # Copied from amazon-eks-entrypoint-existing-vpc and modified
  SharedResourcesStack:
    Condition:  EnsureEksQsSharedResources
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${XrdS3BucketName}.s3.${XrdS3BucketRegion}.${AWS::URLSuffix}/${XrdS3KeyPrefix}submodules/quickstart-amazon-eks/templates/amazon-eks-prerequisites.template.yaml"
      Parameters:
        Version: "1.0.0"
        AccountTemplateUri: !Sub 'https://aws-quickstart-${AWS::Region}.s3.${AWS::Region}.${AWS::URLSuffix}/quickstart-amazon-eks/templates/amazon-eks-per-account-resources.template.yaml'
        RegionalTemplateUri: !Sub 'https://aws-quickstart-${AWS::Region}.s3.${AWS::Region}.${AWS::URLSuffix}/quickstart-amazon-eks/templates/amazon-eks-per-region-resources.template.yaml'

  # Retrieve latest EKS base image ID from SSM.
  BaseImageId:
    Type: Custom::CliQuery
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            # ConditionalDependsOnCludge
            - W1019
    Properties:
      ServiceToken: !Sub ['arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Prefix}-ResourceReader', {Prefix: 'eks-quickstart'}]
      AwsCliCommand: !Sub
       - "ssm get-parameter --name '${ParamPath}' --query Parameter"
       - ParamPath: !Sub
           - "/aws/service/eks/optimized-ami/${KubernetesVersion}/${OS}/recommended/image_id"
           - OS: amazon-linux-2
         ConditionalDependsOnCludge: !If [ EnsureEksQsSharedResources, !Ref SharedResourcesStack, '']
      IdField: 'Value'

  # Create and customize required EC2 instance
  Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref BaseImageId
      InstanceType: !Ref InstanceType
      UserData:
        "Fn::Base64": !Sub
          - |-
            #!/bin/bash -x
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

            export XRD_S3_BUCKET_NAME="${XrdS3BucketName}"
            export XRD_S3_BUCKET_REGION="${XrdS3BucketRegion}"
            export XRD_S3_KEY_PREFIX="${XrdS3KeyPrefix}"

            wget -P /etc/xrd/ "https://${XrdS3BucketName}.s3.${XrdS3BucketRegion}.${AWS::URLSuffix}/${XrdS3KeyPrefix}ami_assets${Script}"  && \
              chmod a+x ${Script} && \
              ${Script}

            /opt/aws/bin/cfn-signal \
              -e $? \
              --stack ${AWS::StackName} \
              --region ${AWS::Region} \
              --resource WaitForInstance
            shutdown -h now
          - Script: /etc/xrd/xrd-vrouter-build-ami.sh

  # Completes when the instance is fully provisioned and ready for AMI creation.
  WaitForInstance:
    Type: AWS::CloudFormation::WaitCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M

  # Create the AMI via custom resource to invoke the required snapshot API.
  AMI:
    Type: Custom::AMI
    DependsOn: WaitForInstance
    Properties:
      ServiceToken: !GetAtt AMIFunction.Arn
      InstanceId: !Ref Instance


  # Custom resource to create AMI snapshot - IAM role for lambda execution
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [lambda.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Policies:
      - PolicyName: EC2Policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
              - 'ec2:DescribeInstances'
              - 'ec2:DescribeImages'
              - 'ec2:CreateImage'
              - 'ec2:DeregisterImage'
              - 'ec2:DescribeSnapshots'
              - 'ec2:DeleteSnapshot'
              Resource: ['*']

  # Custom resource to create AMI snapshot - the lambda itself.
  AMIFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          import logging
          import cfnresponse
          import json
          import boto3
          from threading import Timer
          from botocore.exceptions import WaiterError

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):

            ec2 = boto3.resource('ec2')
            physicalId = event['PhysicalResourceId'] if 'PhysicalResourceId' in event else None

            def success(data={}):
              cfnresponse.send(event, context, cfnresponse.SUCCESS, data, physicalId)

            def failed(e):
              cfnresponse.send(event, context, cfnresponse.FAILED, str(e), physicalId)

            logger.info('Request received: %s\n' % json.dumps(event))

            try:
              instanceId = event['ResourceProperties']['InstanceId']
              if (not instanceId):
                raise Exception('InstanceID required')

              if not 'RequestType' in event:
                success({'Data': 'Unhandled request type'})
                return

              if event['RequestType'] == 'Delete':
                if not physicalId:
                  raise Exception('No PhysicalId provided for Deletion')

                if (not physicalId.startswith('ami-')):
                  raise Exception('Unknown PhysicalId: %s' % physicalId)

                ec2client = boto3.client('ec2')
                images = ec2client.describe_images(ImageIds=[physicalId])
                for image in images['Images']:
                  ec2.Image(image['ImageId']).deregister()  # type: ignore
                  snapshots = ([bdm['Ebs']['SnapshotId']
                                for bdm in image['BlockDeviceMappings']
                                if 'Ebs' in bdm and 'SnapshotId' in bdm['Ebs']])
                  for snapshot in snapshots:
                    ec2.Snapshot(snapshot).delete()  # type: ignore

                success({'Data': 'OK'})
              elif event['RequestType'] in set(['Create', 'Update']):
                if not physicalId:  # AMI creation has not been requested yet
                  instance = ec2.Instance(instanceId)  # type: ignore
                  instance.wait_until_stopped()

                  image = instance.create_image(Name="xrd-amazon-eks-node-${KubernetesVersion}-${AWS::StackName}")

                  physicalId = image.image_id
                else:
                  logger.info('Continuing in awaiting image available: %s\n' % physicalId)

                ec2client = boto3.client('ec2')
                waiter = ec2client.get_waiter('image_available')

                try:
                  waiter.wait(ImageIds=[physicalId], WaiterConfig={'Delay': 30, 'MaxAttempts': 6})
                except WaiterError as e:
                  # Request the same event but set PhysicalResourceId so that the AMI is not created again
                  event['PhysicalResourceId'] = physicalId
                  logger.info('Timeout reached, continuing function: %s\n' % json.dumps(event))
                  lambda_client = boto3.client('lambda')
                  lambda_client.invoke(FunctionName=context.invoked_function_arn,
                                        InvocationType='Event',
                                        Payload=json.dumps(event))
                  return

                success({'Data': 'OK'})
              else:
                success({'Data': 'OK'})
            except Exception as e:
              failed(e)
      Runtime: python3.9
      Timeout: 300

Outputs:
  AmiId:
    Value: !Ref AMI

