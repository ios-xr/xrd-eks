Mappings:
  Variables:
    OIDCIssuerURL:
      Value: "https://oidc.eks.us-east-1.amazonaws.com/id/E68CA83D3C7CE2E74A59CD0A131E4E56"

Resources:
  GetThumbprintsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AWSLambdaExecute"

  GetThumbprints:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          const crypto = require("crypto")
          const https = require("https");
          const cfn_response = require("cfn-response")
          exports.handler = function(event, context) {
            const url = new URL(event.ResourceProperties.OIDCIssuerURL)
            const request = https.get(url, function(response) {
              var cert = response.connection.getPeerCertificate(true)
              var thumbprints = []
              while (true) {
                var shasum = crypto.createHash("sha1")
                shasum.update(cert.raw)
                thumbprints.push(shasum.digest("hex"))
                if (!cert.issuerCertificate || cert == cert.issuerCertificate) {
                  break
                }
                cert = cert.issuerCertificate
              }
              var data = {Thumbprints: thumbprints.slice(-5)}
              cfn_response.send(event, context, cfn_response.SUCCESS, data);
            });
            request.end()
          };

      Handler: index.handler
      Runtime: nodejs18.x
      Role: !GetAtt GetThumbprintsExecutionRole.Arn

  ExecuteGetThumbprints:
    Type: Custom::ExecuteGetThumbprints
    Properties:
      ServiceToken: !GetAtt GetThumbprints.Arn
      OIDCIssuerURL: !FindInMap [Variables, OIDCIssuerURL, Value]

  OIDCProvider:
    Type: "AWS::IAM::OIDCProvider"
    Properties:
      ClientIdList:
        - sts.amazonaws.com
      Url: !FindInMap [Variables, OIDCIssuerURL, Value]
      ThumbprintList: !GetAtt ExecuteGetThumbprints.Thumbprints

  EBSCSIDriverRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: !Sub
        - |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Federated": "${OIDCProviderArn}"
                },
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringEquals": {
                    "oidc.eks.${AWS::Region}.amazonaws.com/id/${OIDC}:sub": "system:serviceaccount:kube-system:ebs-csi-controller-sa",
                    "oidc.eks.${AWS::Region}.amazonaws.com/id/${OIDC}:aud": "sts.amazonaws.com"
                  }
                }
              }
            ]
          }
        - OIDCProviderArn: !Ref OIDCProvider
          OIDC: !Select [3, !Split ["/", !Ref OIDCProvider]]
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy"

  EBSCSIPlugin:
    Type: "AWS::EKS::Addon"
    Properties:
      AddonName: "aws-ebs-csi-driver"
      ClusterName: "xrd-cluster"
      ServiceAccountRoleArn: !Sub
        - "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${RoleName}"
        - RoleName: !Ref EBSCSIDriverRole
